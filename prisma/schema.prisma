// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             Int         @id @default(autoincrement())
  phone          String?     @unique
  email          String?     @unique
  name           String
  avatar         String?
  careatedAt     DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tokens         Token[]
  products       Product[]
  fav            Favorite[]
  post           Post[]
  answer         Answer[]
  wondering      Wondering[]
  myReview       Review[]    @relation(name: "myReview")
  receivedReview Review[]    @relation(name: "receivedReview")
  sale           Sale[]
  purchase       Purchase[]
  stream         Stream[]
  message        Message[]
}

model Token {
  id         Int      @id @default(autoincrement())
  payload    String   @unique
  // let know prisma usderId in Token refer to id in User
  // onDelete: Cascade meane if user is deleted, tolen will be deleted autometically
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  price       Int
  image       String
  description String     @db.MediumText
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  careatedAt  DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  fav         Favorite[]
  sale        Sale[]
  purchase    Purchase[]
  @@index([userId])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  productId  Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId, productId])
}

model Sale {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  productId  Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId, productId])
}

model Purchase {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  productId  Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId, productId])
}

model Post {
  id         Int         @id @default(autoincrement())
  question   String      @db.MediumText
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  lat        Float?
  lng        Float?
  careatedAt DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  answer     Answer[]
  wondering  Wondering[]
  @@index([userId])
}

model Answer {
  id         Int      @id @default(autoincrement())
  answer     String   @db.MediumText
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId, postId])
}

model Wondering {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId, postId])
}

model Review {
  id         Int      @id @default(autoincrement())
  review     String   @db.MediumText
  score      Int?
  writer     User     @relation(name: "myReview", fields: [writerId], references: [id], onDelete: Cascade)
  writerId   Int
  receiver   User     @relation(name: "receivedReview", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([writerId, receiverId])
}

model Stream {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  name        String
  price       Int
  description String    @db.MediumText
  careatedAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  message     Message[]
  liveId      String
  liveUrl     String
  liveKey     String
  @@index([userId])
}

model Message {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  stream     Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId   Int
  message    String   @db.MediumText
  careatedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([userId, streamId])
}
